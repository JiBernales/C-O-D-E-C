import 'models.dart';

final Lesson c_lesson_1 = Lesson(
  id: 'c_lesson_1',
  title: 'Basic Concepts and Logic Design',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(id: 'c_topic_1', title: 'Programming Language',
        content: 'A programming language is a special language that the programmer used in order to give a set of instruction for a computer to execute.',
        imageUrl: 'images/ctopic1 (1).png'),
    Topic(id: 'c_topic_1', title: 'Program',
        content: 'Program is a logical pattern of instructions to solve a problem. it is also a series of coded instruction in performing operations for computer task.',
        imageUrl: 'images/ctopic1 (2).png'),
    Topic(id: 'c_topic_1', title: 'Programming',
        content: 'Programming is an art and science of designing a program. Furthermore, it is the process where an algorithm is applied, encoding it in a notation manner or a way that the computer will understand like the programming languages.',
        imageUrl: 'images/ctopic1 (3).png'),
    Topic(id: 'c_topic_1', title: 'Programmer',
        content: 'Programmer is a person who creates, develops, codes, test, debugs (removing an error) and documents a computer program.',
        imageUrl: 'images/ctopic1 (4).png'),
    Topic(id: 'c_topic_1', title: 'Algorithm',
        content: 'Algorithm is a step-by-step method for solving a computational problem. For example, to compute the salary of the employees, step-by-step processes are applied: from entering of data to the result of the total salary.',
        imageUrl: 'images/ctopic1 (5).png'),
    Topic(id: 'c_topic_1', title: 'Logic',
        content: 'Logic is from the Greek word logos which is sometimes translated as "reason". It is the study of the principles of correct reasoning.',
        imageUrl: 'images/ctopic1 (7).png'),
    Topic(id: 'c_topic_1', title: 'Logic Formulation',
        content: 'The process of coming out with the basic steps to implement a procedure in computer programming is what we call Logic Formulation. This is usually resorted to when having top-down design. Flowcharts and PseudoCodes are the two of most common output of this exercise.'),
    Topic(id: 'c_topic_1', title: 'Flowchart',
      content: 'Flowchart is an illustration that show the "flow" of a program. It is used in many ways; one of which is to solve a problem in computer programming.',
      imageUrl: 'images/ctopic1 (8).png',
    ),
    Topic(id: 'c_topic_1', title: 'Terminator',
      content: 'Terminator is used as a start or stop point in a process. It is also used as a point of interruption or delay of a program.',
      imageUrl: 'images/ctopic1 (10).png',),
    Topic(id: 'c_topic_1', title: 'Process',
      content: 'Process is used for an operation or action step like arithmetic operations and data manipulation. It is also used as a default symbol.',
      imageUrl: 'images/ctopic1 (11).png',),
    Topic(id: 'c_topic_1', title: 'Decision',
      content: 'Decision is a branch in the process or a question. It is used for any logic or comparison operations. The decision symbol has one entry and two exit paths.',
      imageUrl: 'images/ctopic1 (12).png',),
    Topic(id: 'c_topic_1', title: 'Flow Line',
      content: 'Flow lines indicate the direction of flow of logic or and used to connect symbols.',
      imageUrl: 'images/ctopic1 (13).png',),
    Topic(id: 'c_topic_1', title: 'Input/Output',
      content: 'Input/Output symbols are used for input and output operations like printing (displaying) and reading.',
      imageUrl: 'images/ctopic1 (14).png',),
    Topic(id: 'c_topic_1', title: 'Connector',
      content: 'Connector is used to join two flow lines. It also represents any entry, or exit to, another part of the flowchart.',
      imageUrl: 'images/ctopic1 (15).png',),
    Topic(id: 'c_topic_1', title: 'Off-Page Connector',
      content: 'Off-page connector is used to indicate that the flowchart continues to the next page.',
      imageUrl: 'images/ctopic1 (16).png',),
    Topic(id: 'c_topic_1', title: 'Pre-Defined Process',
      content: 'Pre-defined process symbols represent a formally defined sub-process. It is used to represent a group of statements that perform one processing task.',
      imageUrl: 'images/ctopic1 (17).png',),
    Topic(id: 'c_topic_1', title: 'Database',
      content: 'Database is a collection of data, generally stored and accessed in a computer system.',
      imageUrl: 'images/ctopic1 (18).png',),
    Topic(id: 'c_topic_1', title: 'Or',
      content: 'Or symbols represent a Logical OR.',
      imageUrl: 'images/ctopic1 (19).png',),
    Topic(id: 'c_topic_1', title: 'Summing Junction',
      content: 'Summing Junction symbols represent a Logical AND.',
      imageUrl: 'images/ctopic1 (20).png',),
    Topic(id: 'c_topic_1', title: 'Document',
      content: 'Documents represent a document or report.',
      imageUrl: 'images/ctopic1 (11).png',),
    Topic(id: 'c_topic_1', title: 'Pseudocode',
      content: 'Pseudocode is described as a simplified half-English, half-Code informal representation of computer program and algorithm. It is used for clarification of the plan and design of the program before the individual begins to code.',
      imageUrl: 'images/ctopic1 (9).png',),
    Topic(id: 'c_topic_1', title: 'Pseudocode',
      content: 'Pseudocode is used to review the code easier without visiting the source code, easily change or refine ideas for both design and source code, minimizes commenting effort, and to make maintaining easier.'),
    Topic(id: 'c_topic_1', title: 'Pseudocode Components',
        content: 'Pseudocode can be broken down into five components: \n\n•Variables \n•Assignment \n•Input/Output \n•Selection \n•Repetition'),
    Topic(id: 'c_topic_1', title: 'Structure Programming and Top Down Design Procedure',
      content: 'Structure Programming and Top Down Design both refer to the sequential process of creating better programs.',),
    Topic(id: 'c_topic_1', title: 'Top Down Design Procedure',
      content: '',
      imageUrl: 'images/ctopic1 (22).png',),
    Topic(id: 'c_topic_1', title: 'Structure Programming and Top Down Design Procedure Steps',
        content: 'Step 1: Program Planning \n\nIt involves on deciding on the functions of the program. \n\nStep 2: Program Design \n\nIt involves planning how the program will work.'),
    Topic(id: 'c_topic_1', title: 'Structure Programming and Top Down Design Procedure Steps',
        content: 'Step 3: Coding \n\nWriting a program in an appropriate computer language. \n\nStep 4: Testing/Debugging \n\nCorrecting any errors in the program. '),
    Topic(id: 'c_topic_1', title: 'Structure Programming and Top Down Design Procedure Steps',
        content: 'Step 5: Documentation \n\nWriting a detailed description of how the program works and how it may be used. \n\nStep 6: Maintenance \n\nCorrecting errors as users point them out. This allows for modification of the program in response to user suggestions and needs.'),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_1',
      question: 'It refers to the person creating, coding , testing, debugging, and documenting a computer program.',
      options: ['Programmer', 'Software Designer', 'Program', 'Programmist'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'A media of communication between human and machine.',
      options: ['Programming Language', 'Connection', 'Loading Screen'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'It is use for clarification of the plan and design of the program before the individual begins to code.',
      options: ['Pseudocode', 'Flowgraph', 'Algorithm', 'Loading Screen'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'An illustration that show the "flow" of a program.',
      options: ['Flowchart', 'Flowgraph', 'Flowbar'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'Step-by-step representation of solving a problem.',
      options: ['Algorithm', 'Flowchart', 'Pseudocode', 'Flowgraph'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'It is the study of the principles of correct reasoning.',
      options: ['Logic', 'Flow', 'Programming', 'Biology'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'A way or an art and science of designing a program.',
      options: ['Programming', 'Progging', 'Progology', 'Programmer'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'Indicates the direction of flow of logic and used to connect symbols.',
      options: ['Flow lines', 'Connector', 'Decision', 'Pointer'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'It is also a series of coded instruction in performing operations for computer task.',
      options: ['Program', 'Flowchart', 'Language', 'Commands'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'Used as a start or stop point in a process. It is also  as a point of interruption or delay of a program.',
      options: ['Terminator', 'Connector', 'Decision', 'Input/Output'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_1',
      question: 'Which is the correct order of Structure Programming/Top Down? \n(Assume C = Coding, M = Maintenance, D = Documentation, PP = Program Planning, TD = Testing and Debugging, PD = Program Designing',
      options: ['PP>PD>C>TD>D>M', 'C>M>D>PP>TD>PD', 'PD>C>D>PD>TD>D', 'PD>C>D>TD>M>PP'],
      correctOptionIndex: 0,
    ),
    /*Quiz(
      id: 'c_quiz_1',
      question: '',
      options: ['', '', '', ''],
      correctOptionIndex: 0,
    ),
    */
  ],
  status: LessonStatus.unlocked,
);

final Lesson c_lesson_2 = Lesson(
  id: 'c_lesson_2',
  title: 'C# Programming Language and Origin',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(id: 'c_topic_2', title: 'The Early History of Programming Languages',
        content: 'There are many persons who contributed brilliant ideas for the development of Programming Languages. '),
    Topic(id: 'c_topic_2', title: 'Joseph Marie Jacquard',
      content: 'Jacquard developed a practical automatic loom which wove patterns controlled by a linked sequence of punched cards.',
      imageUrl: 'images/ctopic2 (1).png',),
    Topic(id: 'c_topic_2', title: 'Jacquard Loom',
      content: 'The Jacquard Loom, invented in 1801 by Joseph Marie Jacquard, is a sewing loom used holes in the punched cards in order to create a decorative pattern in the cloth.',
      imageUrl: 'images/ctopic2 (2).png',
    ),
    Topic(id: 'c_topic_2', title: 'Charles Babbage',
      content: 'Charles Babbage invented the Analytical Engine, a mechanical calculating machine which was based on his earlier invention, the Difference Engine.',
      imageUrl: 'images/ctopic2 (3).png',
    ),
    Topic(id: 'c_topic_2', title: 'Analytical Engine',
      content: 'The analytical engine is a fully program controlled, mechanical computer powered by six steam engines. It can perform any calculation set to it.',
      imageUrl: 'images/ctopic2 (4).png',
    ),
    Topic(id: 'c_topic_2', title: 'Augusta Ada Byron Lovelace',
      content: 'Ada Lovelace helped the development of the Analytical Engine. She is the First Programmer, writing sets of instruction (program) to the analytical engine.',
      imageUrl: 'images/ctopic2 (14).png',),
    Topic(id: 'c_topic_2', title: 'The Modern Programming Languages',
        content: "In the 1940's, computers were electronically powered but the memory capacity of the computer is very low. In this era, programmers primarily used assembly language. In the succeeding years, several programming languages were developed and started to gain popularity and use."),
    Topic(id: 'c_topic_2', title: 'Assembly Language',
      content: "Assembly Language was the primary language used by programmers in the 1940's because of the very limited space they had to work with. However, this programming language is hard to learn and prone to error.",
      imageUrl: 'images/ctopic2 (5).png',),
    Topic(id: 'c_topic_2', title: 'FORTRAN',
      content: 'FORTRAN was invented by John Backus in 1955. FORTRAN stands for "FORmula TRANslator". The language was written to support scientific and engineering applications.',
      imageUrl: 'images/ctopic2 (6).png',),
    Topic(id: 'c_topic_2', title: 'COBOL',
      content: 'FORTRAN was invented jointly by Short Range Committee and Grace Hopper. COBOL stands for "COmmon Business Oriented Language". COBOL is primarily used in business, finance, and administrative systems for companies and governments.',
      imageUrl: 'images/ctopic2 (7).png',),
    Topic(id: 'c_topic_2', title: 'Algol 60',
      content: 'Algol60 was developed by committee of the American and European Computer Scientist. Algol60 was a versatile language. However it was also complex and had a steep learning curve, which discouraged new and inexperienced programmers from learning it.',
      imageUrl: 'images/ctopic2 (8).png',),
    Topic(id: 'c_topic_2', title: 'Pascal',
      content: 'Pascal was a general-purpose, high-level language invented by Niklaus Wirth. Pascal was relatively easy to learn and saw wide use among early programmers.',
      imageUrl: 'images/ctopic2 (9).png',),
    Topic(id: 'c_topic_2', title: 'Other Early Programming Languages and Their Developers',
      content: 'C - developed by Dennis Ritchie and Ken Thimpson \n\nSimula - developed by Kristen Nygaard and Ole-Johan Dahl \n\nProlog - developed by Alain Colmerauer, Philippe Roussel, and Robert Kowalski \n\nML - developed by Robin Milner',),
    Topic(id: 'c_topic_2', title: 'High Level/Problem Oriented Language',
      content: 'High Level Languages are human readable languages. It is considerably easier to write and work with this type of languages. These languages are designed to give a better programming efficiency (i.e. faster program development).',),
    Topic(id: 'c_topic_2', title: 'Low Level/Machine Oriented Language',
        content: 'Machine Language or Low Level Language can be read directly by machines. This language is based on machine code. It is harder to learn and write a program in low level language since their structure and syntax differ greatly from most High Level languages.'),
    Topic(id: 'c_topic_2', title: 'Comparison of Low and High Level Languages',
      content: '',
      imageUrl: 'images/ctopic2 (10).png',),
    Topic(id: 'c_topic_2', title: 'Comparison of Low and High Level Languages',
      content: '',
      imageUrl: 'images/ctopic2 (13).png',),
    Topic(id: 'c_topic_2', title: 'C#',
      content: 'C# is an upgrade combination of C and C++ programming language.',
      imageUrl: 'images/ctopic2 (11).png',),
    Topic(id: 'c_topic_2', title: 'C#',
        content: 'C# is  a simple, modern object-oriented programming language developed by Microsoft and approved by European Computer Manufacturers Association (ECMA) and International Standards Organization (ISO). It was developed by Anders Hejlsberg and his team during the development of .Net Framework.'),
    Topic(id: 'c_topic_2', title: 'Characteristics of C#',
        content: '\t•It is a modern, general purpose programming language \n\t•It is object-oriented \n\t•It is component oriented \n\t•It is component oriented \n\t•It is easy to learn \n\t•It is a structured language \n\t•It produces efficient programs \n\t•It can be compiled on a variety of computer platforms \n\t•It is a part of .Net Framework'),
    Topic(id: 'c_topic_2', title: 'Example of C# Code',
      content: '',
      imageUrl: 'images/ctopic2 (12).png',),
    Topic(id: 'c_topic_2', title: '"using System"',
        content: '"using System" is the first line of the program; the "using" keyword is used to include the System namespace in the program. A program generally has multiple using statements.'),
    Topic(id: 'c_topic_2', title: '"namespace BasicSyntax"',
        content: '"namespace BasicSyntax" has the declaration of a namespace, a collection of classes. The "BasicSyntax" namespace contains the class Program.'),
    Topic(id: 'c_topic_2', title: '"class Program"',
        content: '"class Program" declares the class named Program contains the data and method definitions that your program uses. Classes generally contain multiple methods. However, the Program class has only one method Main.'),
    Topic(id: 'c_topic_2', title: '"static void Main (string[] args)"',
        content: 'The Main method states what the class does when executed and is also the entry point of all C# programs. Methods define  the behavior of the class.'),
    Topic(id: 'c_topic_2', title: '"// TODO: Implement Functionality Here"',
        content: 'The line with "//", as well anything enclosed in "/**/", is a comment, ignored by the compiler and is put add annotations to the program.'),
    Topic(id: 'c_topic_2', title: '"Console.WriteLine(...);"',
        content: '"Console.WriteLine("")" displays the statement inside the quotation marks. WriteLine is a method of the Console class defined in the System namespace.'),
    Topic(id: 'c_topic_2', title: '"Console.ReadKey();"',
        content: '"Console.ReadKey();" makes the program wait for a key press and it prevents the screen from running and closing quickly when the program is launched from the IDE.'),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_2',
      question: 'What is the category of programming language that is easy to learn and human readable?',
      options: ['High Level Language', 'Low Level Language'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'What is the category of programming language that is easy to learn and human readable?',
      options: ['High Level Language', 'Low Level Language'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'What is a machine that used holes in the punched cards in order to create a decorative pattern in the cloth?',
      options: ['Jacquard Loom', 'Punching Machine', 'Analytical Machine', 'Cabbage Loom'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'Which is an example of a Machine Language?',
      options: ['Assembly Language', 'Python', 'C#', 'FORTRAN'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'What is the name of the computer machine fully program controlled by six steam engines that can perform complex computations?',
      options: ['Analytical Machine', 'Jacquard Loom', 'Punching Machine', 'Cabbage Loom'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'Who invented the C# language?',
      options: ['Anders Hejlsberg', 'John Backus', 'Charles Babbage', 'Niklaus Wirth'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'Who invented the Analytical Engine?',
      options: ['Charles Babbage', 'Anders Hejlsberg', 'John Backus', 'Niklaus Wirth'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'Who invented the FORTRAN?',
      options: ['John Backus', 'Charles Babbage', 'Anders Hejlsberg', 'Niklaus Wirth'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'Who invented the Pascal?',
      options: ['Niklaus Wirth', 'Charles Babbage', 'Anders Hejlsberg', 'John Backus'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'Who is the first programmer?',
      options: ['Augusta Ada Lovelace', 'John McCarthy', 'Joseph Marie Jacquard'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'Who invented the LISP?',
      options: ['John McCarthy', 'Augusta Ada Lovelace', 'Joseph Marie Jacquard'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_2',
      question: 'Who invented the machine that punched cards with holes?',
      options: ['Joseph Marie Jacquard', 'Augusta Ada Lovelace', 'John McCarthy'],
      correctOptionIndex: 0,
    ),
  ],
  status: LessonStatus.locked,
);

final Lesson c_lesson_3 = Lesson(
  id: 'c_lesson_3',
  title: 'C# Programming Language Environment: IDE',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(id: 'c_topic_3', title: 'C#',
      content: 'C# is a modern, general-purpose, object-oriented programming developed by Microsoft and approved by European Computer Manufacturers Association (ECMA) and International Standards Organization (ISO). It was developed by Anders Hejlsberg and his team during the development of .Net Framework.',
      imageUrl: 'images/ctopic3 (1).png',),
    Topic(id: 'c_topic_3', title: 'C#',
      content: 'C# is designed for Common Language Infrastructure (CLI), which consists of the executable code and runtime environment that allows use of various high-level languages on different computer platforms and architectures.',
      imageUrl: 'images/ctopic3 (2).png',),
    Topic(id: 'c_topic_3', title: '.Net Framework',
        content: 'The .Net Framework is a revolutionary platform that helps you to write Windows applications, Web applications, and Web services.',
      imageUrl: 'images/ctopic3 (3).png',),
    Topic(id: 'c_topic_3', title: 'Integrated Development Environment (IDE)',
      content: 'Integrated Develop Environments (IDEs) are software packages that attempt to provide comprehensive support for coding, testing, and debugging.',
      imageUrl: 'images/ctopic3 (4).png',),
    Topic(id: 'c_topic_3', title: 'Microsoft IDEs for C# Programming',
      content: 'Visual Studio 2010 (VS)',
      imageUrl: 'images/ctopic3 (5).png',
    ),
    Topic(id: 'c_topic_3', title: 'Microsoft IDEs for C# Programming',
      content: 'Visual C# 2010 Express (VCE)',
      imageUrl: 'images/ctopic3 (6).png',
    ),
    Topic(id: 'c_topic_3', title: 'Microsoft IDEs for C# Programming',
      content: 'Visual Web Developer',
      imageUrl: 'images/ctopic3 (7).png',
    ),
    Topic(id: 'c_topic_3', title: 'Integrated Development Environment for C#',
        content: 'Using IDEs, you can write all kinds of C# programs from simple command-line applications to more complex applications. You can also write C# source code files using basic text editors like Notepad and compile the code into assemblies using the command-line compiler, which is a part of the .NET Framework.'),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_3',
      question: 'C# is what type of programming language?',
      options: ['High Level Language', 'Low Level Language'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_3',
      question: 'A software package that attempts to provide comprehensive support for coding, testing, and debugging is called?',
      options: ['Integrated Development Environment', 'Low Level Language', 'Integrated Display Environment', 'Integrated Developers Environment', 'Integration Developers Environment'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_3',
      question: 'What is the Microsoft-developed platform that helps you to write Windows applications, Web applications, and Web services?',
      options: ['.Net Framework', '.M Framework', '.M Environment', '.Net Environment'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_3',
      question: 'What company developed C#?',
      options: ['Microsoft', 'Apple', 'Visual Studio', 'ECMA', 'ISO'],
      correctOptionIndex: 0,
    ),
  ],
  status: LessonStatus.locked,
);

final Lesson c_lesson_4 = Lesson(
  id: 'c_lesson_4',
  title: 'Data Types, Variables, and Constants',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(id: 'c_topic_4', title: 'Data Types',
        content: 'Data types are a value classification of a variable in programming language. Common examples are integer, float, double float, and string.'),
    Topic(id: 'c_topic_4', title: 'String',
      content: 'Strings are used to classify letters or text.',
      imageUrl: 'images/ctopic4 (1).png',
    ),
    Topic(id: 'c_topic_4', title: 'Integer',
      content: 'Integers represent whole numbers.',
      imageUrl: 'images/ctopic4 (2).png',),
    Topic(id: 'c_topic_4', title: 'Float',
        content: 'Float represents numbers with decimal points.',
        imageUrl: 'images/ctopic4 (3).png'),
    Topic(id: 'c_topic_4', title: 'Double Float',
        content: 'Double floats are float numbers but only have decimals up to their hundredths.',
        imageUrl: 'images/ctopic4 (4).png'),
    Topic(id: 'c_topic_4', title: 'C# Primitive Type',
        content: 'C# Primitives are also called value types and predefined in the .NET framework. Primitive types can be assigned a value directly. The value assigned is stored on the stack as opposed to the heap.'),
    Topic(id: 'c_topic_4', title: 'Non-Primitive/Reference Type',
        content: 'The reference types do not contain the actual data stored in a variable, but they contain a reference to the variables. In other words, they refer to a memory location. Using multiple variables, the reference types can refer to a memory location. If the data in the memory location is changed by one of the variables, the other variables automatically reflect this change in value.'),
    Topic(id: 'c_topic_4', title: 'Variables',
        content: 'This refers to the storage of information that will be used (retrieve) inside the program. It is named as a storage location capable of containing a certain type of data that can be modified during program execution.',
        imageUrl: 'images/ctopic4 (5).png'),
    Topic(id: 'c_topic_4', title: 'Identifier Name',
        content: 'Identifier names are used to reference variables, functions, labels, and various other user-defined objects.'),
    Topic(id: 'c_topic_4', title: 'Rules in Naming Identifiers',
        content: '1. The name can contain letters, digits, and the underscore character (_). \n2. The first character of the name must be a letter. The underscore is a legal first character, but its use is not recommended at the beginning of a name. An underscore is often used with special commands, and is sometimes hard to read. \n3. Case matters (that is, upper- and lowercase letters). C# is case sensitive; thus, the names "count" and "Count" refer to two different variables.'),
    Topic(id: 'c_topic_4', title: 'Rules in Naming Identifiers',
        content: "3. Case matters (that is, upper- and lowercase letters). C# is case sensitive; thus, the names 'count' and 'Count' refer to two different variables.\n4. C# keywords can't be used as variable names. Recall that a keyword is a word that is part of the C# language."),
    Topic(id: 'c_topic_4', title: 'Examples of Legal and Illegal Variables',
        content: '',
        imageUrl: 'images/ctopic4 (6).png'
    ),
    Topic(id: 'c_topic_4', title: 'Initializing Variables',
        content: 'Variables are initialized (assigned a value) with an equal sign followed by a constant expression. The general form of initialization:\n\nvariable_name = value; \n\nVariables can be initialized in their declaration. The initializer consists of an equal sign followed by a constant expression as:\n\n <data_type> <variable_name> = value;',
        imageUrl: 'images/ctopic4 (7).png'
    ),
    Topic(id: 'c_topic_4', title: 'Constants',
        content: 'Constants are immutable values which are known at compile time and do not change for the life of the program. A good example is pi, which always has the same value of approximately 3.14....',
        imageUrl: 'images/ctopic4 (8).png'),
    Topic(id: 'c_topic_4', title: 'Constants',
        content: 'Constants are declared with the "const" modifier. Only the C# built-in types (excluding System.Object) may be declared as "const".'),
    Topic(id: 'c_topic_4', title: 'Integer Literals',
        content: 'Integer literals can be decimal, octal, or hexadecimal constants. A prefix specifies the base (radix): 0x or 0X for hexadecimal, 0 for octal, and no prefix for decimal. Integer literals can also have a suffix that is a combination of U and L, for unsigned and long, respectively. The suffix can be uppercase or lowercase and can be in any order.'),
    Topic(id: 'c_topic_4', title: 'Examples of Integer Literals',
        content: '',
        imageUrl: 'images/ctopic4 (10).png'
    ),
    Topic(id: 'c_topic_4', title: 'Floating-Point Literals',
        content: 'Floating-point literals has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or exponential form.',
        imageUrl: 'images/ctopic4 (9).png'),
    Topic(id: 'c_topic_4', title: 'Floating-Point Literals',
      content: 'When representing floating-point literals in decimal form, you must include the decimal point, the exponent, or both; and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by "e" or "E".',),
    Topic(id: 'c_topic_4', title: 'Examples of Floating-Point Literals',
        content: '',
        imageUrl: 'images/ctopic4 (11).png'),
    Topic(id: 'c_topic_4', title: 'Character Literals',
      content: 'Character literals are enclosed in single quotes. A character literal can be a plain character such as "x", an escape sequence such as "\t, or a universal character such as "\u02C0"',),
    Topic(id: 'c_topic_4', title: 'Escape Sequences',
      content: 'Certain characters in C# have special meaning and are usually preceded by a backslash (\\).',),
    Topic(id: 'c_topic_4', title: 'Examples of Character Constants',
        content: '',
        imageUrl: 'images/ctopic4 (12).png'),
    Topic(id: 'c_topic_4', title: 'Examples of Character Constants',
        content: '',
        imageUrl: 'images/ctopic4 (13).png'),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_4',
      question: 'Which is the correct way to declare a float type variable with the name "Change"?',
      options: ['float Change;', 'flt Change;'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_4',
      question: 'Which is the correct way to declare a double float type variable with name "remainder"?',
      options: ['double remainder;', 'df remainder;'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_4',
      question: 'Which is the correct way to initialize a string type variable with name "Name" and value "Prog"?',
      options: ['string Name = "Prog";', 'Name string = "Prog";', 'string Name == "Prog";', 'str Name = "Prog";', 'Name str = "Prog";'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_4',
      question: 'Which is the correct way to initialize an integer type variable with name "grade" with value equal to 11?',
      options: ['int grade = 11;', 'int grade = "11";', 'grade int = "11";', 'int grade == "11";', 'integer grade = "11";', 'grade int = 11;'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_4',
      question: 'Which is a correct float type variable?',
      options: ['510E-5', '510E'],
      correctOptionIndex: 0,
    ),
  ],
  status: LessonStatus.locked,
);

final Lesson c_lesson_5 = Lesson(
  id: 'c_lesson_5',
  title: 'Operators, Expressions, and Type Conversion',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(id: 'c_topic_5', title: 'Operators',
      content: 'Operators are symbols used to perform mathematical or logical or logical operations on values (or variables) called operands to produce a new value, called the result.',
      imageUrl: 'images/ctopic5 (1).png',),
    Topic(id: 'c_topic_5', title: 'Operands',
        content: 'Operands are the objects that are manipulated by the operation to be performed. Operands are always evaluated left-to-right in C#.',
        imageUrl: 'images/ctopic5 (2).png'),
    Topic(id: 'c_topic_5', title: 'Expressions',
        content: 'Expressions are built from variables, constants, and operators.',
        imageUrl: 'images/ctopic5 (3).png'),
    Topic(id: 'c_topic_5', title: 'Unary Operators',
        content: 'Unary operators are operators that act upon a single operand to produce a new value.',
        imageUrl: 'images/ctopic5 (4).png'),
    Topic(id: 'c_topic_5', title: 'Binary Operators',
        content: 'Binary operators require two operands. C# uses infix notation for binary operators. The operator appears between the left and right operands. The result of every binary operation other than assignment must be used in some way, an example is to assign it to a variable.'),
    Topic(id: 'c_topic_5', title: 'Arithmetic Operators',
        content: 'Arithmetic operators are binary operators used to perform mathematical operations.',
        imageUrl: 'images/ctopic5 (5).png'),
    Topic(id: 'c_topic_5', title: 'Relational Operators',
        content: 'Relational operators are binary operators used to determine the relationship of one quantity to another. They always return 1 (true) or 0 (false) as the outcome of the test.',
        imageUrl: 'images/ctopic5 (6).png'),
    Topic(id: 'c_topic_5', title: 'Logical Operators',
        content: 'Logical operators show the ways through which relationships can be connected. They are used to perform logical operations such as AND, OR, and NOT. Logical operators operate on boolean values and return a boolean result.',
        imageUrl: 'images/ctopic5 (7).png'),
    Topic(id: 'c_topic_5', title: 'Compound Assignment Operators',
        content: 'Compound Assignment operators are used to perform an operation on a value and then assign the result to the variable. The compound assignment operators are shorthand for standard operations.'),
    Topic(id: 'c_topic_5', title: 'Compound Assignment Operators',
        content: '',
        imageUrl: 'images/ctopic5 (8).png'),
    Topic(id: 'c_topic_5', title: 'Compound Assignment Operators',
        content: '',
        imageUrl: 'images/ctopic5 (9).png'),
    Topic(id: 'c_topic_5', title: 'Ternary Operators',
        content: 'Ternary operators are operators that take three arguments. The first argument is a conditional expression, the second contains a statement to be returned upon a true comparison, and the third contains a statement to be returned upon a false comparison.',
        imageUrl: 'images/ctopic5 (10).png'),
    Topic(id: 'c_topic_5', title: 'Type Conversion',
        content: 'Type conversion happens as data of one type is converted to another type. There are two types of type conversion: implicit and explicit.',
        imageUrl: 'images/ctopic5 (11).png'),
    Topic(id: 'c_topic_5', title: 'Implicit Type Conversion',
        content: 'Implicit type conversion is performed automatically by C# in a type-safe manner. For example, conversion from smaller to larger integral types and conversions from derived classes to base classes.'),
    Topic(id: 'c_topic_5', title: 'Explicit Type Conversion',
        content: 'Explicit type conversion is performed in C# using predefined functions. Explicit conversions require a cast operator.'),
    Topic(id: 'c_topic_5', title: 'Type Conversion Methods',
        content: '',
        imageUrl: 'images/ctopic5 (12).png'),
    Topic(id: 'c_topic_5', title: 'Type Conversion Methods',
        content: '',
        imageUrl: 'images/ctopic5 (13).png'),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_5',
      question: 'Which of the following is not an example of a binary operator in C#?',
      options: ['!', '-', '+'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_5',
      question: 'What type of operator is used in the expression `x = x + 1`?',
      options: ['Arithmetic', 'Logical', 'Compound Assignment'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_5',
      question: 'What is the result of using the relational operator `>` between two operands?',
      options: ['Boolean value', 'String value', 'Integer value'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_5',
      question: 'What is the purpose of the ternary operator?',
      options: ['Evaluate three conditions', 'Execute code based on a condition', 'Perform type conversion'],
      correctOptionIndex: 1,
    ),
    Quiz(
      id: 'c_quiz_5',
      question: 'Which type of type conversion is performed automatically by C#?',
      options: ['Implicit', 'Explicit', 'Dynamic'],
      correctOptionIndex: 0,
    ),
  ],
  status: LessonStatus.locked,
);

final Lesson c_lesson_6 = Lesson(
  id: 'c_lesson_6',
  title: 'C# Programming Input-Output Console',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(id: 'c_topic_6', title: 'Console',
        content: 'The Console is a window of the operating system through which users can interact with programs. The system console is a black window which displays text information. It can display text strings and has a cursor which moves to the right after each character is printed.',
        imageUrl: 'images/ctopic6 (1).png'),
    Topic(id: 'c_topic_6', title: 'User-Program Communication',
        content: 'A lot of programs communicate in some way to the user. This is necessary for the user in order to give instructions to them. \nModern communication methods are many and various: they can be through graphical or web-based interface, console, or others. The interaction consists of text input from the standard input (usually from the keyboard) or text output to the standard output (usually to the monitor/screen). These actions are also known as input-output operations.'),
    Topic(id: 'c_topic_6', title: 'Console',
        content: "The console is one of the tools for communication between programs and users. However, it is becoming less and less used. This is because the modern user interface concepts are more convenient and intuitive to work with, from a user's perspective."),
    Topic(id: 'c_topic_6', title: 'When To Use The Console',
        content: "The console remains an irreplaceable tool for communication with the user. One of these cases is when writing small and simple programs. Another use case is when we want to test a small piece of code for a larger application. \nWhen it is necessary to focus the attention on the specific problem to be solved, rather than the elegant representation of the result to the user, a console is an easy to implement tool without having to go through a complicated interface."),
    Topic(id: 'c_topic_6', title: 'Operating System Shells',
        content: "The console in Windows is often associated with the system command interpreter, also called the 'Command Prompt' or 'shell' or which is a console-based program in the operating system, which provides access to system commands as well as a wide range of programs which are part of or installed along with the operating system."),
    Topic(id: 'c_topic_6', title: 'Types of OS Shells',
        content: 'CLI - Command Line Interface \nCLI is a console for commands (cmd.exe in Windows and bash for Linux) \nGUI - Graphical User Interface \nGUI is a graphical work environment (Windows Explorer and some Linux File Managers)'),
    Topic(id: 'c_topic_6', title: 'Standard Input, Standard Output, and Standard Error',
      content: 'The operating system is required to define standard input-output mechanisms for user interaction. These mechanisms rely on system code running at the initialization of a program to open and close data streams for input and output. \nStreams can be user input from the standard input stream (in C# this is Console.In), information to be displayed from the standard output stream (in C# this is Console.Out), or error messages from the standard error stream (in C# this is Console.Error).',),
    Topic(id: 'c_topic_6', title: 'Devices for Console Input',
        content: 'The main device used for receiving inputs is the keyboard. Besides the keyboard, an application input can come from many places such as a file, microphone, barcode reader, and others.',
        imageUrl: 'images/ctopic6 (2).png'),
    Topic(id: 'c_topic_6', title: 'Devices for Console Output',
        content: 'The output of a program may be on the console (on the screen), as well as in a file or another output device such as a printer.',
        imageUrl: 'images/ctopic6 (3).png'),
    Topic(id: 'c_topic_6', title: 'Write() and WriteLine()',
        content: 'The Write() and WriteLine() methods are be used to print variables and literals. The main difference between the two methods is that the Write() method only prints the string provided to it, while the WriteLine() method prints the string and moves to the start of the next line as well.'),
    Topic(id: 'c_topic_6', title: 'Example Standard Output',
        content: '',
        imageUrl: 'images/ctopic6 (4).png'),
    Topic(id: 'c_topic_6', title: 'Read(), ReadKey(), and ReadLine()',
        content: 'The Read(), ReadKey(), and ReadLine() methods are used to read the next line of characters from the standard input stream, with the Read() and ReadKey() methods stopping reading after the user presses any key, while the ReadLine() method only stops when the user presses the Enter key. Read() and ReadKey only differ in their return type, with Read() returning an integer (the ASCII code of the character) and ReadKey() returning a ConsoleKeyInfo object.'),
    Topic(id: 'c_topic_6', title: 'Example Standard Input',
        content: '',
        imageUrl: 'images/ctopic6 (5).png'),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_6',
      question: 'What will the WriteLine() method do?',
      options: ['Print string and move to next line', 'Reads input from the user', 'Print string without moving to next line'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_6',
      question: 'Which method is used to read a single key press from the user?',
      options: ['ReadLine()', 'ReadKey()', 'Write()'],
      correctOptionIndex: 1,
    ),
    Quiz(
      id: 'c_quiz_6',
      question: 'What is the main device used for receiving inputs in a console application?',
      options: ['Keyboard', 'Mouse', 'Printer'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_6',
      question: 'What is the standard output stream in C#?',
      options: ['Console.Out', 'Console.Error', 'Console.In'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_6',
      question: 'What is the standard input stream in C#?',
      options: ['Console.Out', 'Console.Error', 'Console.In'],
      correctOptionIndex: 2,
    ),
    Quiz(
      id: 'c_quiz_6',
      question: 'What is the standard error stream in C#?',
      options: ['Console.Out', 'Console.Error', 'Console.In'],
      correctOptionIndex: 1,
    ),
    Quiz(
      id: 'c_quiz_6',
      question: 'What type of shell provides a graphical user interface?',
      options: ['CLI', 'GUI', 'Command Prompt'],
      correctOptionIndex: 1,
    ),
  ],
  status: LessonStatus.locked,
);

final Lesson c_lesson_7 = Lesson(
  id: 'c_lesson_7',
  title: 'Conditional Statements',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(id: 'c_topic_7', title: 'Introduction to Conditional Statements',
        content: 'Conditional statements allow the execution of different code blocks based on specific conditions.',
        imageUrl: 'images/ctopic7 (1).png'),
    Topic(id: 'c_topic_7', title: 'IF Statement',
        content: 'An if statement consists of a boolean expression followed by one or more statements. The statements are executed if the boolean expression is true. An if statement can be followed by an optional else statement, which executes when the boolean expression is false.',
        imageUrl: 'images/ctopic7 (2).png'),
    Topic(id: 'c_topic_7', title: 'The ELSE IF Statement',
        content: 'The else if statement can be used to test other conditions after the previous condition or conditions are not satisfied. If the first condition is false, the next else if statement is tested, and so on.',
        imageUrl: 'images/ctopic7 (3).png'),
    Topic(id: 'c_topic_7', title: 'ELSE Statement',
        content: 'The else statement executes a block of code if the condition in the if statement and any other else if statement evaluates to false.',
        imageUrl: 'images/ctopic7 (4).png'),
    Topic(id: 'c_topic_7', title: 'Nested IF Statements',
        content: 'The else statement executes a block of code if the condition in the if statement evaluates to false.',
        imageUrl: 'images/ctopic7 (5).png'),
    Topic(id: 'c_topic_7', title: 'The Switch Block',
        content: 'The switch block evaluates a variable and matches its value against multiple case options. A break statement is used to exit the switch block.',
        imageUrl: 'images/ctopic7 (6).png'),
    Topic(id: 'c_topic_7', title: 'Ternary Operators',
        content: 'Ternary operators are operators that take three arguments. The first argument is a conditional expression, the second contains a statement to be returned upon a true comparison, and the third contains a statement to be returned upon a false comparison.',
        imageUrl: 'images/ctopic5 (10).png'),
    Topic(
      id: 'c_topic_7',
      title: 'Common Conditional Pitfalls',
      content: '1. Forgetting to use curly braces `{}` for multi-line `if` blocks.\n2. Using `=` (assignment) instead of `==` (equality) in conditions.\n3. Not including a `break` statement in `switch` cases.\n4. Overusing nested `if` statements, which can make code hard to read.',),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_7',
      question: 'Which of the following is the correct syntax for an `if` statement in C#?',
      options: [
        'if (condition) { // code }',
        'if condition { // code }',
        'if { condition } // code',
        'if [condition] { // code }',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'When is the `else` statement code executed?',
      options: [
        'When the `if` condition is false',
        'When the `if` condition is true',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'Which statement is used to test more than 2 conditions in C#?',
      options: [
        'else-if ladder',
        'switch statement',
        'ternary operator',
        'nested if',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'What is the output of the following code?\nint x = 5;\nint y = (x > 3) ? 10 : 20;\nConsole.WriteLine(y);',
      options: ['10', '20', '5'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'Which of the following is true about the `switch` statement?',
      options: [
        'It can have multiple `case` blocks',
        'It can only have one `case` block',
        'It does not require a `default` block',
        'It cannot be used with integers',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'What is the purpose of the `break` statement in a `switch` block?',
      options: [
        'To exit the `switch` block',
        'To skip the next `case` block',
        'To restart the `switch` block',
        'To terminate the program',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'What is the output of the following code?\nint x = 10;\nif (x == 10)\n{\n    Console.WriteLine("Hello");\n}\nelse\n{\n    Console.WriteLine("World");\n}',
      options: ['Hello', 'HelloWorld', 'World'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'Which operator is used as a shorthand for the `if-else` statement?',
      options: [
        'Ternary operator',
        'Logical AND operator',
        'Logical OR operator',
        'Assignment operator',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'What is the output of the following code?\nint x = 15;\nif (x > 10 && x < 20)\n{\n    Console.WriteLine("Valid");\n}\nelse\n{\n    Console.WriteLine("Invalid");\n}',
      options: ['Valid', 'Invalid'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_7',
      question: 'Which of the following is a common pitfall when using`if` conditional statements?',
      options: [
        'Using `=` instead of `==`',
        'Using `==` instead of `=`',
        'Forgetting to use parentheses',
        'Using too many `else` statements',
      ],
      correctOptionIndex: 0,
    ),
  ],
  status: LessonStatus.locked,
);

final Lesson c_lesson_8 = Lesson(
  id: 'c_lesson_8',
  title: 'C# Looping and Iteration',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(
      id: 'c_topic_8',
      title: 'Introduction to Loops',
      content: 'Loops in C# are used to execute a block of code repeatedly until a specified condition is met. They are essential for automating repetitive tasks and iterating over collections like arrays or lists.',
      imageUrl: 'images/ctopic8 (1).png',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'FOR Loop',
      content: 'The for loop is used to execute a block of code a specific number of times. It executes a block of code repeatedly until a certain condition has been satisfied, usually when a certain variable, which has a set value at the creation but is either incremented or decremented while looping, reaches a specific threshold or value.',
      imageUrl: 'images/ctopic8 (2).png',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'FOR Loop',
      content: 'For loops usually consist of three parts: initialization, condition, and iteration.\n\nSyntax:\nfor (initialization; condition; iteration)\n{\n    // Code to execute\n}',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'FOREACH Loop',
      content: 'The `foreach` loop operates similarly to the for loop. It is used to iterate over elements in a collection, like an array or a list. It uses the index of each element instead of manipulating a initialized variable. \n\nSyntax:\nforeach (var item in collection)\n{\n    // Code to execute\n}',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'while Loop',
      content: 'The `while` loop is used to execute a block of code as long as a specified condition is true. The condition is evaluated before each iteration.\n\nSyntax:\nwhile (condition)\n{\n    // Code to execute\n}',
      imageUrl: 'images/ctopic8 (3).png',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'while Loop',
      content: 'Syntax:\nwhile (condition)\n{\n    // Code to execute\n}',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'do-while Loop',
      content: 'The `do-while` loop is similar to the `while` loop, but it guarantees that the block of code is executed at least once, as the condition is evaluated after the loop body.',
      imageUrl: 'images/ctopic8 (4).png',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'do-while Loop',
      content: 'Syntax:\ndo\n{\n    // Code to execute\n} while (condition);',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'Nested Loops',
      content: 'A nested loop is a loop inside another loop. It is often used to work with multi-dimensional arrays or perform complex iterations.',
      imageUrl: 'images/ctopic8 (5).png',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'break Statement',
      content: 'The `break` statement is used to exit a loop prematurely. It terminates the loop and transfers control to the statement immediately following the loop.\n\nSyntax:\nwhile (true)\n{\n    if (condition)\n    {\n        break; // Exit the loop\n    }\n}',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'continue Statement',
      content: 'The `continue` statement is used to skip the current iteration of a loop and proceed to the next iteration.\n\nSyntax:\nfor (int i = 0; i < 10; i++)\n{\n    if (i % 2 == 0)\n    {\n        continue; // Skip even numbers\n    }\n    // Code to execute\n}',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'Infinite Loops',
      content: 'An infinite loop occurs when the loop condition never becomes false. This can cause the program to hang or crash. Always ensure that the loop condition will eventually become false.',
      imageUrl: 'images/ctopic8 (8).png',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'Infinite Loops',
      content: 'Example:\nwhile (true)\n{\n    // Code to execute indefinitely\n}',
    ),
    Topic(
      id: 'c_topic_8',
      title: 'Common Pitfalls',
      content: '1. Forgetting to update the loop variable, leading to infinite loops.\n2. Using the wrong loop type for the task.\n3. Misusing `break` and `continue`, which can make code harder to read.\n4. Overusing nested loops, which can reduce performance.',
    ),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_8',
      question: 'Which loop is used when you know the exact number of iterations?',
      options: ['for loop', 'while loop', 'do-while loop', 'foreach loop'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'What is the output of the following code?\nfor (int i = 0; i < 3; i++)\n{\n    Console.WriteLine(i);\n}',
      options: ['0 1 2', '0 1 2 3', '1 2'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'Which loop guarantees at least one execution of the loop body?',
      options: ['do-while loop', 'while loop', 'for loop', 'foreach loop'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'What is the purpose of the `break` statement?',
      options: [
        'To exit the loop',
        'To skip the current iteration',
        'To restart the loop',
        'To terminate the program',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'What is the output of the following code?\nint i = 0;\nwhile (i < 3)\n{\n    Console.WriteLine(i);\n    i++;\n}',
      options: ['0 1 2', '1 2 3', '1 2'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'Which loop is best suited for iterating over a collection?',
      options: ['foreach loop', 'for loop', 'while loop', 'do-while loop'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'What is the purpose of the `continue` statement?',
      options: [
        'To skip the current iteration',
        'To exit the loop',
        'To restart the loop',
        'To terminate the program',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'What is the output of the following code?\nfor (int i = 0; i < 5; i++)\n{\n    if (i == 3)\n    {\n        break;\n    }\n    Console.WriteLine(i);\n}',
      options: ['0 1 2', '1 2 3', '1 2'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'What is the output of the following code?\nfor (int i = 0; i < 5; i++)\n{\n    if (i % 2 == 0)\n    {\n        continue;\n    }\n    Console.WriteLine(i);\n}',
      options: ['1 3', '0 2 4', '1 2 3 4'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_8',
      question: 'Which of the following is a common pitfall when using loops?',
      options: [
        'Forgetting to update the loop variable',
        'Using the wrong loop type',
        'Overusing nested loops',
        'All of the above',
      ],
      correctOptionIndex: 3,
    ),
  ],
  status: LessonStatus.locked,
);

final Lesson c_lesson_9 = Lesson(
  id: 'c_lesson_9',
  title: 'Methods and Encapsulation',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(
      id: 'c_topic_9',
      title: 'Introduction to Methods',
      content: 'A method in C# is a block of code that performs a specific task. It is defined with a name, a return type, and optional parameters. Methods help in organizing code, improving reusability, and making programs easier to maintain.',
      imageUrl: 'images/ctopic9 (1).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Defining a Method',
      content: 'A method is defined using the following syntax:\n\nreturnType MethodName(parameters)\n{\n    // Method body\n}',
      imageUrl: 'images/ctopic9 (2).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Method Parameters',
      content: 'Parameters are variables passed to a method to provide input. They are defined in the method signature and can be used within the method body. Multiple parameters can be added as long as they are separated with a comma. A method with defined parameters must be called with the same number of arguments to pass as parameters.',
      imageUrl: 'images/ctopic9 (3).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Default Method Parameters',
      content: 'If a method is called without its defined parameters, it may cause an error .Default parameters can be added by using the equals sign (=). Methods with empty parameters can be called without parameters as long as they have default parameters.',
      imageUrl: 'images/ctopic9 (4).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Return Values',
      content: 'The `return` keyword is used to make the method return a value of the same primitive data type (such as int or double). The return type must match the type specified in the method signature.',
      imageUrl: 'images/ctopic9 (5).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Void Methods',
      content: 'A `void` method does not return any value. It is used when the method is made to perform an action without producing a result.',
      imageUrl: 'images/ctopic9 (6).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Method Overloading',
      content: 'Method overloading allows you to define multiple methods with the same name but different parameters. The correct method is chosen based on the arguments passed. Method overloading enables you to create functions that perform similar tasks but with varying inputs.',
      imageUrl: 'images/ctopic9 (7).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Encapsulation',
      content: 'Encapsulation is a fundamental concept in object-oriented programming that restricts direct access to an object\'s data and methods. It is achieved using access modifiers like `private`, `public`, and `protected`.',
      imageUrl: 'images/ctopic9 (8).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Access Modifiers',
      content: 'Access modifiers control the visibility of classes, methods, and fields. The most common access modifiers are:\n\n- `public`: Accessible from anywhere.\n- `private`: Accessible only within the same class.\n- `protected`: Accessible within the same class and derived classes.\n- `internal`: Accessible within the same assembly.',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Properties',
      content: 'Properties are special methods used to provide controlled access to private fields. They have `get` and `set` accessors.',
      imageUrl: 'images/ctopic9 (9).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Auto-Implemented Properties',
      content: 'Auto-implemented properties simplify property declaration by automatically creating a private backing field. The short hand uses { get; set; }.',
      imageUrl: 'images/ctopic9 (10).png',
    ),
    Topic(
      id: 'c_topic_9',
      title: 'Common Pitfalls',
      content: '1. Forgetting to specify a return type for non-void methods.\n2. Overloading methods with ambiguous parameter lists.\n3. Exposing private fields directly without using properties.\n4. Using incorrect access modifiers, leading to unintended access levels.',
    ),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_9',
      question: 'What is the purpose of a method in C#?',
      options: [
        'To perform a specific task',
        'To define a class',
        'To declare a variable',
        'To create an object',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'What is the return type of a method that does not return any value?',
      options: ['void', 'int', 'string', 'bool'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'What is the output of the following code?\nint Add(int a, int b)\n{\n    return a + b;\n}\nConsole.WriteLine(Add(3, 4));',
      options: ['7', '12', '0'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'Which access modifier restricts access to the same class?',
      options: ['private', 'public', 'protected', 'internal'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'Method overloading involves defining methods with what?',
      options: [
        'Same name but different parameters',
        'Multiple return types',
        'No parameters',
        'No return type',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'What is the concept of restricting direct access to an object\'s data and methods?',
      options: [
        'Encapsulation',
        'Properties',
        'Access Modifier Manipulation',
        'Method Overloading',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'What is the output of the following code?\nvoid PrintMessage()\n{\n    Console.WriteLine("Hello, World!");\n}\nPrintMessage();',
      options: ['Hello, World!', 'No output', 'Hello'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'Which of the following is an auto-implemented property?',
      options: [
        'public string Name { get; set; }',
        'private string name;',
        'public string Name { get { return name; } }',
        'public string Name;',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'What is the purpose of the `get` accessor in a property?',
      options: [
        'To retrieve the value of a property',
        'To set the value of a property',
        'To define a method',
        'To create an object',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_9',
      question: 'Which of the following is a common pitfall when using methods?',
      options: [
        'No return type for non-void methods',
        'Using too many parameters',
        'Defining too many methods',
        'Using public access modifiers for all fields',
      ],
      correctOptionIndex: 0,
    ),
  ],
  status: LessonStatus.locked,
);

final Lesson c_lesson_10 = Lesson(
  id: 'c_lesson_10',
  title: 'Arrays',
  isCompleted: false,
  isOngoing: false,
  topics: [
    Topic(
      id: 'c_topic_10',
      title: 'Introduction to Arrays',
      content: 'An array in C# is a collection of elements of the same type stored in contiguous memory locations. Arrays are useful for storing multiple values in a single variable and accessing them using an index.',
      imageUrl: 'images/ctopic10 (1).png',
    ),
    Topic(
      id: 'c_topic_10',
      title: 'Declaring and Initializing Arrays',
      content: 'Arrays can be declared and initialized in several ways:\n\n1. Single-dimensional array:\nint[] numbers = new int[5];\n2. With initial values:\nint[] numbers = { 1, 2, 3, 4, 5 };\n3. Multi-dimensional array:\nint[,] matrix = new int[3, 3];',
    ),
    Topic(
      id: 'c_topic_10',
      title: 'Accessing Array Elements',
      content: 'Array elements are accessed using their index. The index starts at 0 for the first element.\n\nExample:\nint[] numbers = { 10, 20, 30, 40, 50 };\nConsole.WriteLine(numbers[2]); // Output: 30',
      imageUrl: 'images/ctopic10 (2).png',
    ),
    Topic(
      id: 'c_topic_10',
      title: 'Modifying Array Elements',
      content: 'Array elements can be modified by assigning a new value to a specific index.',
      imageUrl: 'images/ctopic10 (3).png',
    ),
    Topic(
      id: 'c_topic_10',
      title: 'Array Length',
      content: 'The `Length` property of an array returns the total number of elements in the array.\n\nExample:\nint[] numbers = { 1, 2, 3, 4, 5 };\nConsole.WriteLine(numbers.Length); // Output: 5',
      imageUrl: 'images/ctopic10 (4).png',
    ),
    Topic(
      id: 'c_topic_10',
      title: 'Iterating Over Arrays',
      content: 'Arrays can be iterated using loops like `for`, `foreach`, or `while`.}',
      imageUrl: 'images/ctopic10 (5).png',
    ),
    Topic(
      id: 'c_topic_10',
      title: 'Common Array Methods',
      content: 'C# provides several built-in methods for working with arrays:\n\n- `Array.Sort()`: Sorts the elements in an array.\n- `Array.Reverse()`: Reverses the order of elements in an array.\n- `Array.IndexOf()`: Finds the index of a specific element.',
    ),
    Topic(
      id: 'c_topic_10',
      title: 'Common Pitfalls',
      content: '1. Accessing an index outside the bounds of the array (causing an `IndexOutOfRangeException`).\n2. Forgetting to initialize the array before using it.\n3. Using the wrong loop type for iterating over arrays.',
    ),
  ],
  quizzes: [
    Quiz(
      id: 'c_quiz_10',
      question: 'What is an array in C#?',
      options: [
        'A collection of elements of the same type',
        'A single variable',
        'A method',
        'A class',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_10',
      question: 'How do you declare a single-dimensional array in C#?',
      options: [
        'int[] numbers = new int[5];',
        'int numbers = new int[5];',
        'int[] numbers = { 1, 2, 3, 4, 5 };',
        'int numbers = { 1, 2, 3, 4, 5 };',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_10',
      question: 'What is the output of the following code?\nint[] numbers = { 10, 20, 30, 40, 50 };\nConsole.WriteLine(numbers[2]);',
      options: ['30', '20', '40', '50'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_10',
      question: 'What is the purpose of the `Length` property in an array?',
      options: [
        'To get the total number of elements',
        'To modify the elements',
        'To sort the array',
        'To reverse the array',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_10',
      question: 'What is the output of the following code?\nint[] numbers = { 1, 2, 3, 4, 5 };\nnumbers[2] = 99;\nConsole.WriteLine(numbers[2]);',
      options: ['99', '3', '2'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_10',
      question: 'Which loop is best suited for iterating over an array?',
      options: ['for loop', 'while loop', 'do-while loop', 'foreach loop'],
      correctOptionIndex: 3,
    ),
    Quiz(
      id: 'c_quiz_10',
      question: 'What is the output of the following code?\nint[] numbers = { 5, 3, 9, 1, 4 };\nArray.Sort(numbers);\nConsole.WriteLine(string.Join(", ", numbers));',
      options: ['1, 3, 4, 5, 9', '5, 3, 9, 1, 4', '9, 5, 4, 3, 1'],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_10',
      question: 'What happens if you access an index outside the bounds of an array?',
      options: [
        'An `IndexOutOfRangeException` is thrown',
        'The program crashes',
        'The array resizes itself',
        'The last element is returned',
      ],
      correctOptionIndex: 0,
    ),
    Quiz(
      id: 'c_quiz_10',
      question: 'Which of the following is a common pitfall when using arrays?',
      options: [
        'Index outside the bounds of the array',
        'Using the wrong loop type',
        'Forgetting to initialize the array',
        'All of the above',
      ],
      correctOptionIndex: 3,
    ),
  ],
  status: LessonStatus.locked,
);

Map<String, Lesson> allLessons = {
  'c_lesson_1': c_lesson_1,
  'c_lesson_2': c_lesson_2,
  'c_lesson_3': c_lesson_3,
  'c_lesson_4': c_lesson_4,
  'c_lesson_5': c_lesson_5,
  'c_lesson_6': c_lesson_6,
  'c_lesson_7': c_lesson_7,
  'c_lesson_8': c_lesson_8,
  'c_lesson_9': c_lesson_9,
  'c_lesson_10': c_lesson_10,
};